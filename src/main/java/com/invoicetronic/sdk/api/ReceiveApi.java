/*
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.invoicetronic.sdk.api;

import com.invoicetronic.sdk.ApiCallback;
import com.invoicetronic.sdk.ApiClient;
import com.invoicetronic.sdk.ApiException;
import com.invoicetronic.sdk.ApiResponse;
import com.invoicetronic.sdk.Configuration;
import com.invoicetronic.sdk.Pair;
import com.invoicetronic.sdk.ProgressRequestBody;
import com.invoicetronic.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.invoicetronic.sdk.model.ProblemHttpResult;
import com.invoicetronic.sdk.model.Receive;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceiveApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReceiveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceiveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for receiveGet
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param unread Unread items only. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveGetCall(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable Boolean unread, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (unread != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unread", unread));
        }

        if (committente != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("committente", committente));
        }

        if (prestatore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prestatore", prestatore));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        if (lastUpdateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_from", lastUpdateFrom));
        }

        if (lastUpdateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_to", lastUpdateTo));
        }

        if (dateSentFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_from", dateSentFrom));
        }

        if (dateSentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_to", dateSentTo));
        }

        if (documentDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_from", documentDateFrom));
        }

        if (documentDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_to", documentDateTo));
        }

        if (documentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_number", documentNumber));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiveGetValidateBeforeCall(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable Boolean unread, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return receiveGetCall(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort, _callback);

    }

    /**
     * List incoming invoices
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param unread Unread items only. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @return List&lt;Receive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Receive> receiveGet(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable Boolean unread, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort) throws ApiException {
        ApiResponse<List<Receive>> localVarResp = receiveGetWithHttpInfo(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * List incoming invoices
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param unread Unread items only. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @return ApiResponse&lt;List&lt;Receive&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Receive>> receiveGetWithHttpInfo(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable Boolean unread, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = receiveGetValidateBeforeCall(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<List<Receive>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List incoming invoices (asynchronously)
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param unread Unread items only. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param page Page number. Defaults to 1. (optional, default to 1)
     * @param pageSize Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveGetAsync(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable Boolean unread, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort, final ApiCallback<List<Receive>> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiveGetValidateBeforeCall(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Receive>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiveIdDelete
     * @param id Item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveIdDeleteCall(@javax.annotation.Nonnull Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receive/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiveIdDeleteValidateBeforeCall(@javax.annotation.Nonnull Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiveIdDelete(Async)");
        }

        return receiveIdDeleteCall(id, _callback);

    }

    /**
     * Delete an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param id Item id (required)
     * @return Receive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Receive receiveIdDelete(@javax.annotation.Nonnull Integer id) throws ApiException {
        ApiResponse<Receive> localVarResp = receiveIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param id Item id (required)
     * @return ApiResponse&lt;Receive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receive> receiveIdDeleteWithHttpInfo(@javax.annotation.Nonnull Integer id) throws ApiException {
        okhttp3.Call localVarCall = receiveIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Receive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an incoming invoice by id (asynchronously)
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param id Item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveIdDeleteAsync(@javax.annotation.Nonnull Integer id, final ApiCallback<Receive> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiveIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Receive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiveIdGet
     * @param id Item id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveIdGetCall(@javax.annotation.Nonnull Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receive/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiveIdGetValidateBeforeCall(@javax.annotation.Nonnull Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiveIdGet(Async)");
        }

        return receiveIdGetCall(id, _callback);

    }

    /**
     * Get an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param id Item id (required)
     * @return Receive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Receive receiveIdGet(@javax.annotation.Nonnull Integer id) throws ApiException {
        ApiResponse<Receive> localVarResp = receiveIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param id Item id (required)
     * @return ApiResponse&lt;Receive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receive> receiveIdGetWithHttpInfo(@javax.annotation.Nonnull Integer id) throws ApiException {
        okhttp3.Call localVarCall = receiveIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Receive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an incoming invoice by id (asynchronously)
     * Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
     * @param id Item id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiveIdGetAsync(@javax.annotation.Nonnull Integer id, final ApiCallback<Receive> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiveIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Receive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
