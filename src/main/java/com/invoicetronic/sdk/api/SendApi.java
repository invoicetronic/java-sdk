/*
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.invoicetronic.sdk.api;

import com.invoicetronic.sdk.ApiCallback;
import com.invoicetronic.sdk.ApiClient;
import com.invoicetronic.sdk.ApiException;
import com.invoicetronic.sdk.ApiResponse;
import com.invoicetronic.sdk.Configuration;
import com.invoicetronic.sdk.Pair;
import com.invoicetronic.sdk.ProgressRequestBody;
import com.invoicetronic.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.invoicetronic.sdk.model.FatturaOrdinaria;
import java.io.File;
import java.time.OffsetDateTime;
import com.invoicetronic.sdk.model.ProblemDetails;
import com.invoicetronic.sdk.model.ProblemHttpResult;
import com.invoicetronic.sdk.model.Send;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sendFilePost
     * @param _file  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendFilePostCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendFilePostValidateBeforeCall(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling sendFilePost(Async)");
        }

        return sendFilePostCall(_file, validate, signature, _callback);

    }

    /**
     * Add an invoice by file
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param _file  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send sendFilePost(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        ApiResponse<Send> localVarResp = sendFilePostWithHttpInfo(_file, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice by file
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param _file  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> sendFilePostWithHttpInfo(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        okhttp3.Call localVarCall = sendFilePostValidateBeforeCall(_file, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice by file (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param _file  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendFilePostAsync(@javax.annotation.Nonnull File _file, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendFilePostValidateBeforeCall(_file, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendGet
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param includePayload Include payload in the response. Defaults to false. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendGetCall(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Boolean includePayload, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (committente != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("committente", committente));
        }

        if (prestatore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prestatore", prestatore));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_name", fileName));
        }

        if (lastUpdateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_from", lastUpdateFrom));
        }

        if (lastUpdateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_update_to", lastUpdateTo));
        }

        if (dateSentFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_from", dateSentFrom));
        }

        if (dateSentTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_sent_to", dateSentTo));
        }

        if (documentDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_from", documentDateFrom));
        }

        if (documentDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_date_to", documentDateTo));
        }

        if (documentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_number", documentNumber));
        }

        if (includePayload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_payload", includePayload));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendGetValidateBeforeCall(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Boolean includePayload, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return sendGetCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, _callback);

    }

    /**
     * List invoices
     * test **markdown**.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param includePayload Include payload in the response. Defaults to false. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @return List&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<Send> sendGet(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Boolean includePayload, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort) throws ApiException {
        ApiResponse<List<Send>> localVarResp = sendGetWithHttpInfo(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * List invoices
     * test **markdown**.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param includePayload Include payload in the response. Defaults to false. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @return ApiResponse&lt;List&lt;Send&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Send>> sendGetWithHttpInfo(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Boolean includePayload, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = sendGetValidateBeforeCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<List<Send>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List invoices (asynchronously)
     * test **markdown**.
     * @param companyId Company id (optional)
     * @param identifier SDI identifier. (optional)
     * @param committente Vat number or fiscal code. (optional)
     * @param prestatore Vat number or fiscal code. (optional)
     * @param fileName File name. (optional)
     * @param lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param documentNumber Document number. (optional)
     * @param includePayload Include payload in the response. Defaults to false. (optional)
     * @param page Page number. (optional, default to 1)
     * @param pageSize Items per page. Cannot be greater than 200. (optional, default to 100)
     * @param sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendGetAsync(@javax.annotation.Nullable Integer companyId, @javax.annotation.Nullable String identifier, @javax.annotation.Nullable String committente, @javax.annotation.Nullable String prestatore, @javax.annotation.Nullable String fileName, @javax.annotation.Nullable OffsetDateTime lastUpdateFrom, @javax.annotation.Nullable OffsetDateTime lastUpdateTo, @javax.annotation.Nullable OffsetDateTime dateSentFrom, @javax.annotation.Nullable OffsetDateTime dateSentTo, @javax.annotation.Nullable OffsetDateTime documentDateFrom, @javax.annotation.Nullable OffsetDateTime documentDateTo, @javax.annotation.Nullable String documentNumber, @javax.annotation.Nullable Boolean includePayload, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String sort, final ApiCallback<List<Send>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendGetValidateBeforeCall(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Send>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendIdGet
     * @param id Item id (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendIdGetCall(@javax.annotation.Nonnull Integer id, @javax.annotation.Nullable Boolean includePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includePayload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_payload", includePayload));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendIdGetValidateBeforeCall(@javax.annotation.Nonnull Integer id, @javax.annotation.Nullable Boolean includePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendIdGet(Async)");
        }

        return sendIdGetCall(id, includePayload, _callback);

    }

    /**
     * Get a invoice by id
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param id Item id (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Send sendIdGet(@javax.annotation.Nonnull Integer id, @javax.annotation.Nullable Boolean includePayload) throws ApiException {
        ApiResponse<Send> localVarResp = sendIdGetWithHttpInfo(id, includePayload);
        return localVarResp.getData();
    }

    /**
     * Get a invoice by id
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param id Item id (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> sendIdGetWithHttpInfo(@javax.annotation.Nonnull Integer id, @javax.annotation.Nullable Boolean includePayload) throws ApiException {
        okhttp3.Call localVarCall = sendIdGetValidateBeforeCall(id, includePayload, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a invoice by id (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param id Item id (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendIdGetAsync(@javax.annotation.Nonnull Integer id, @javax.annotation.Nullable Boolean includePayload, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendIdGetValidateBeforeCall(id, includePayload, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendIdentifierGet
     * @param identifier  (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendIdentifierGetCall(@javax.annotation.Nonnull String identifier, @javax.annotation.Nullable Boolean includePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includePayload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_payload", includePayload));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendIdentifierGetValidateBeforeCall(@javax.annotation.Nonnull String identifier, @javax.annotation.Nullable Boolean includePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling sendIdentifierGet(Async)");
        }

        return sendIdentifierGetCall(identifier, includePayload, _callback);

    }

    /**
     * Get a invoice by identifier
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param identifier  (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Send sendIdentifierGet(@javax.annotation.Nonnull String identifier, @javax.annotation.Nullable Boolean includePayload) throws ApiException {
        ApiResponse<Send> localVarResp = sendIdentifierGetWithHttpInfo(identifier, includePayload);
        return localVarResp.getData();
    }

    /**
     * Get a invoice by identifier
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param identifier  (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> sendIdentifierGetWithHttpInfo(@javax.annotation.Nonnull String identifier, @javax.annotation.Nullable Boolean includePayload) throws ApiException {
        okhttp3.Call localVarCall = sendIdentifierGetValidateBeforeCall(identifier, includePayload, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a invoice by identifier (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param identifier  (required)
     * @param includePayload Include payload in the response. Defaults to false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendIdentifierGetAsync(@javax.annotation.Nonnull String identifier, @javax.annotation.Nullable Boolean includePayload, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendIdentifierGetValidateBeforeCall(identifier, includePayload, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendJsonPost
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendJsonPostCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/send/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendJsonPostValidateBeforeCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling sendJsonPost(Async)");
        }

        return sendJsonPostCall(fatturaOrdinaria, validate, signature, _callback);

    }

    /**
     * Add an invoice by json
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send sendJsonPost(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        ApiResponse<Send> localVarResp = sendJsonPostWithHttpInfo(fatturaOrdinaria, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice by json
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> sendJsonPostWithHttpInfo(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        okhttp3.Call localVarCall = sendJsonPostValidateBeforeCall(fatturaOrdinaria, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice by json (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendJsonPostAsync(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendJsonPostValidateBeforeCall(fatturaOrdinaria, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPost
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPostCall(@javax.annotation.Nonnull Send send, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = send;

        // create path and map variables
        String localVarPath = "/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPostValidateBeforeCall(@javax.annotation.Nonnull Send send, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'send' is set
        if (send == null) {
            throw new ApiException("Missing the required parameter 'send' when calling sendPost(Async)");
        }

        return sendPostCall(send, validate, signature, _callback);

    }

    /**
     * Add an invoice
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send sendPost(@javax.annotation.Nonnull Send send, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        ApiResponse<Send> localVarResp = sendPostWithHttpInfo(send, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> sendPostWithHttpInfo(@javax.annotation.Nonnull Send send, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        okhttp3.Call localVarCall = sendPostValidateBeforeCall(send, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param send  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPostAsync(@javax.annotation.Nonnull Send send, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPostValidateBeforeCall(send, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendValidateFilePost
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidateFilePostCall(@javax.annotation.Nonnull File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/validate/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendValidateFilePostValidateBeforeCall(@javax.annotation.Nonnull File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling sendValidateFilePost(Async)");
        }

        return sendValidateFilePostCall(_file, _callback);

    }

    /**
     * Validate an invoice file
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param _file  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void sendValidateFilePost(@javax.annotation.Nonnull File _file) throws ApiException {
        sendValidateFilePostWithHttpInfo(_file);
    }

    /**
     * Validate an invoice file
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param _file  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendValidateFilePostWithHttpInfo(@javax.annotation.Nonnull File _file) throws ApiException {
        okhttp3.Call localVarCall = sendValidateFilePostValidateBeforeCall(_file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice file (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidateFilePostAsync(@javax.annotation.Nonnull File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendValidateFilePostValidateBeforeCall(_file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendValidateJsonPost
     * @param fatturaOrdinaria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidateJsonPostCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/send/validate/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendValidateJsonPostValidateBeforeCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling sendValidateJsonPost(Async)");
        }

        return sendValidateJsonPostCall(fatturaOrdinaria, _callback);

    }

    /**
     * Validate an invoice by json
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void sendValidateJsonPost(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        sendValidateJsonPostWithHttpInfo(fatturaOrdinaria);
    }

    /**
     * Validate an invoice by json
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendValidateJsonPostWithHttpInfo(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        okhttp3.Call localVarCall = sendValidateJsonPostValidateBeforeCall(fatturaOrdinaria, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice by json (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidateJsonPostAsync(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendValidateJsonPostValidateBeforeCall(fatturaOrdinaria, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendValidatePost
     * @param send  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidatePostCall(@javax.annotation.Nonnull Send send, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = send;

        // create path and map variables
        String localVarPath = "/send/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendValidatePostValidateBeforeCall(@javax.annotation.Nonnull Send send, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'send' is set
        if (send == null) {
            throw new ApiException("Missing the required parameter 'send' when calling sendValidatePost(Async)");
        }

        return sendValidatePostCall(send, _callback);

    }

    /**
     * Validate an invoice
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param send  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void sendValidatePost(@javax.annotation.Nonnull Send send) throws ApiException {
        sendValidatePostWithHttpInfo(send);
    }

    /**
     * Validate an invoice
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param send  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendValidatePostWithHttpInfo(@javax.annotation.Nonnull Send send) throws ApiException {
        okhttp3.Call localVarCall = sendValidatePostValidateBeforeCall(send, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param send  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidatePostAsync(@javax.annotation.Nonnull Send send, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendValidatePostValidateBeforeCall(send, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendValidateXmlPost
     * @param fatturaOrdinaria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidateXmlPostCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/send/validate/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendValidateXmlPostValidateBeforeCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling sendValidateXmlPost(Async)");
        }

        return sendValidateXmlPostCall(fatturaOrdinaria, _callback);

    }

    /**
     * Validate an invoice by xml
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public void sendValidateXmlPost(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        sendValidateXmlPostWithHttpInfo(fatturaOrdinaria);
    }

    /**
     * Validate an invoice by xml
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendValidateXmlPostWithHttpInfo(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria) throws ApiException {
        okhttp3.Call localVarCall = sendValidateXmlPostValidateBeforeCall(fatturaOrdinaria, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate an invoice by xml (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendValidateXmlPostAsync(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendValidateXmlPostValidateBeforeCall(fatturaOrdinaria, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendXmlPost
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendXmlPostCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fatturaOrdinaria;

        // create path and map variables
        String localVarPath = "/send/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendXmlPostValidateBeforeCall(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fatturaOrdinaria' is set
        if (fatturaOrdinaria == null) {
            throw new ApiException("Missing the required parameter 'fatturaOrdinaria' when calling sendXmlPost(Async)");
        }

        return sendXmlPostCall(fatturaOrdinaria, validate, signature, _callback);

    }

    /**
     * Add an invoice by xml
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return Send
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public Send sendXmlPost(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        ApiResponse<Send> localVarResp = sendXmlPostWithHttpInfo(fatturaOrdinaria, validate, signature);
        return localVarResp.getData();
    }

    /**
     * Add an invoice by xml
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @return ApiResponse&lt;Send&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Send> sendXmlPostWithHttpInfo(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature) throws ApiException {
        okhttp3.Call localVarCall = sendXmlPostValidateBeforeCall(fatturaOrdinaria, validate, signature, null);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an invoice by xml (asynchronously)
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     * @param fatturaOrdinaria  (required)
     * @param validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param signature Whether to digitally sign the document. (optional, default to Auto)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendXmlPostAsync(@javax.annotation.Nonnull FatturaOrdinaria fatturaOrdinaria, @javax.annotation.Nullable Boolean validate, @javax.annotation.Nullable String signature, final ApiCallback<Send> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendXmlPostValidateBeforeCall(fatturaOrdinaria, validate, signature, _callback);
        Type localVarReturnType = new TypeToken<Send>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
