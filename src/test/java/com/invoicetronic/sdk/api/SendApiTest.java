/*
 * Invoicetronic API
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.invoicetronic.sdk.api;

import com.invoicetronic.sdk.ApiException;
import com.invoicetronic.sdk.model.FatturaOrdinaria;
import java.io.File;
import java.time.OffsetDateTime;
import com.invoicetronic.sdk.model.ProblemDetails;
import com.invoicetronic.sdk.model.ProblemHttpResult;
import com.invoicetronic.sdk.model.Send;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SendApi
 */
@Disabled
public class SendApiTest {

    private final SendApi api = new SendApi();

    /**
     * Add an invoice by file
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendFilePostTest() throws ApiException {
        File _file = null;
        Boolean validate = null;
        String signature = null;
        Send response = api.sendFilePost(_file, validate, signature);
        // TODO: test validations
    }

    /**
     * List invoices
     *
     * test **markdown**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendGetTest() throws ApiException {
        Integer companyId = null;
        String identifier = null;
        String committente = null;
        String prestatore = null;
        String fileName = null;
        OffsetDateTime lastUpdateFrom = null;
        OffsetDateTime lastUpdateTo = null;
        OffsetDateTime dateSentFrom = null;
        OffsetDateTime dateSentTo = null;
        OffsetDateTime documentDateFrom = null;
        OffsetDateTime documentDateTo = null;
        String documentNumber = null;
        Boolean includePayload = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        List<Send> response = api.sendGet(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort);
        // TODO: test validations
    }

    /**
     * Get a invoice by id
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendIdGetTest() throws ApiException {
        Integer id = null;
        Send response = api.sendIdGet(id);
        // TODO: test validations
    }

    /**
     * Add an invoice by json
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendJsonPostTest() throws ApiException {
        FatturaOrdinaria fatturaOrdinaria = null;
        Boolean validate = null;
        String signature = null;
        Send response = api.sendJsonPost(fatturaOrdinaria, validate, signature);
        // TODO: test validations
    }

    /**
     * Add an invoice
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPostTest() throws ApiException {
        Send send = null;
        Boolean validate = null;
        String signature = null;
        Send response = api.sendPost(send, validate, signature);
        // TODO: test validations
    }

    /**
     * Validate an invoice file
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendValidateFilePostTest() throws ApiException {
        File _file = null;
        api.sendValidateFilePost(_file);
        // TODO: test validations
    }

    /**
     * Validate an invoice by json
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendValidateJsonPostTest() throws ApiException {
        FatturaOrdinaria fatturaOrdinaria = null;
        api.sendValidateJsonPost(fatturaOrdinaria);
        // TODO: test validations
    }

    /**
     * Validate an invoice
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendValidatePostTest() throws ApiException {
        Send send = null;
        api.sendValidatePost(send);
        // TODO: test validations
    }

    /**
     * Validate an invoice by xml
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendValidateXmlPostTest() throws ApiException {
        FatturaOrdinaria fatturaOrdinaria = null;
        api.sendValidateXmlPost(fatturaOrdinaria);
        // TODO: test validations
    }

    /**
     * Add an invoice by xml
     *
     * Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendXmlPostTest() throws ApiException {
        FatturaOrdinaria fatturaOrdinaria = null;
        Boolean validate = null;
        String signature = null;
        Send response = api.sendXmlPost(fatturaOrdinaria, validate, signature);
        // TODO: test validations
    }

}
